org: arrgmin
app: aws-test-2
service: aws-test-2
frameworkVersion: '3'

# package:
#   individually: true  # TODO: what is this?
package:
  exclude:
    - node_modules/**
    - venv/**


provider:
  name: aws
  region: eu-west-1
  stage: ${opt:stage, "dev"}  # not sure what this does
  runtime: python3.8

  # cloudFront:
  #   cachePolicies:
  #     testCachePolicy:
  #       MinTTL: 0
  #       MaxTTL: 86000
  #       DefaultTTL: 3600


plugins:
  - serverless-python-requirements
  # - serverless-wsgi


custom:
  pythonRequirements:
    dockerizePip: non-linux
  config:
    s3_bucket_name: lorrgs
    s3_origin_path: /
    cloudFrontOriginAccessIdentityId: 


functions:
  api:
    handler: handler.handler   # python file + function/object name
    # name: test-${sls:stage}-lambdaName  # aka: id
    environment:
      STAGE: ${self:provider.stage}
    events:
      - http: GET /
      - http: GET /{proxy+}
    memorySize: 256 # optional, in MB, default is 1024
    timeout: 30 # optional, in seconds, default is 6
      # - cloudFront:
      #     eventType: viewer-response
      #     origin: s3://lorrgs.s3.amazonaws.com/api
      #     # pathPattern: /docs*

resources:
  Resources:

    #########################
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          Comment: test_2a

          #########################
          # Cache
          DefaultCacheBehavior:
            AllowedMethods:
            - GET
            - HEAD
            MinTTL: 0
            MaxTTL: 10
            DefaultTTL: 10
            TargetOriginId: s3_origin
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: all
            ViewerProtocolPolicy: redirect-to-https
          # Cache
          CacheBehaviors:
            - PathPattern: ping
              TargetOriginId: lambda_origin
              ForwardedValues:
                QueryString: True
              ViewerProtocolPolicy: redirect-to-https

          #########################
          # CloudFront Origins
          Origins:
          # 1) S3 Origin
          - Id: s3_origin
            # DomainName: ${self:custom.config.s3_bucket_name}.s3.${self:provider.region}.amazonaws.com
            DomainName: lorrgs.s3.eu-west-1.amazonaws.com
            # OriginPath: ${self:custom.config.s3_origin_path}
            S3OriginConfig:
              OriginAccessIdentity: origin-access-identity/cloudfront/E243XMV9VPBBLW    # https://console.aws.amazon.com/cloudfront/v3/home#/oai
          # 2) Lambda Origin
          - Id: lambda_origin
            DomainName:
              Fn::Join:
              - ""
              - - Ref: ApiGatewayRestApi
                - ".execute-api.${self:provider.region}.amazonaws.com"
            OriginPath: /dev
            CustomOriginConfig:
              HTTPPort: '80'
              HTTPSPort: '443'
              OriginProtocolPolicy: https-only

          #########################
          # CloudFront Behaviours