app: aws-test-2
service: aws-test-2
frameworkVersion: '3'

# package:
package:
  individually: true # package each module (eg.: "backend") individually
  patterns:
    - "!node_modules/**"
    - "!venv/**"


provider:
  name: aws
  region: eu-west-1
  stage: ${opt:stage, "dev"}
  runtime: python3.8


plugins:
  - serverless-python-requirements
  # - serverless-wsgi  # TODO: check what this was for


custom:
  pythonRequirements:
    slim: true
    # dockerizePip: non-linux  # TODO
  config:
    s3_bucket_name: lorrgs
    s3_origin_path: /


functions:
  api:
    runtime: python3.8
    module: backend
    handler: handler.handler
    environment:
      STAGE: ${self:provider.stage}
    events:
      - http: GET /
      - http: GET /{proxy+}
    memorySize: 256 # optional, in MB, default is 1024
    timeout: 30 # optional, in seconds, default is 6


resources:
  Resources:

    #########################
    # OriginAccessIdentity for our S3 Bucket
    cloudfrontoriginaccessidentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties: 
        CloudFrontOriginAccessIdentityConfig:   # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudfront-cloudfrontoriginaccessidentity.html
          Comment: ""

    # DefaultCachePolicy:
    #   Type: AWS::CloudFront::CachePolicy
    #   Properties:
    #     CachePolicyConfig:
    #       Name: api-static
    #       MinTTL: 1
    #       MaxTTL: 31536000
    #       DefaultTTL: 86400
    #       ParametersInCacheKeyAndForwardedToOrigin:
    #         CookiesConfig:
    #           CookieBehavior: none
    #         EnableAcceptEncodingBrotli: true
    #         EnableAcceptEncodingGzip: true
    #         HeadersConfig:
    #           HeaderBehavior: none
    #         QueryStringsConfig:
    #           QueryStringBehavior: all
    ApiOriginCachePolicy:
      Type: AWS::CloudFront::CachePolicy
      Properties:
        CachePolicyConfig:
          Name: ${self:service}-${self:provider.stage}-api-cache-policy
          MinTTL: 10
          MaxTTL: 120
          DefaultTTL: 60
          ParametersInCacheKeyAndForwardedToOrigin:
            CookiesConfig:
              CookieBehavior: none
            EnableAcceptEncodingGzip: true
            EnableAcceptEncodingBrotli: true
            HeadersConfig:
              HeaderBehavior: whitelist
              Headers:
                - Authorization
                - Content-Type
            QueryStringsConfig:
              QueryStringBehavior: all

    #########################
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          Comment: test_2a
          PriceClass: PriceClass_100
          DefaultRootObject: "index.html"

          #########################
          # Cache Polcies


          #########################
          # Behaviours
          DefaultCacheBehavior:
            AllowedMethods: [GET, OPTIONS, HEAD]
            TargetOriginId: s3_origin
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6  # Managed-CachingOptimized
            ViewerProtocolPolicy: redirect-to-https
          # Cache
          CacheBehaviors:
            - PathPattern: "api/*"
              TargetOriginId: lambda_origin
              CachePolicyId:
                Ref: ApiOriginCachePolicy
              ViewerProtocolPolicy: redirect-to-https

          #########################
          # CloudFront Origins
          Origins:
          # 1) S3 Origin
          - Id: s3_origin
            OriginPath: /web
            DomainName: ${self:custom.config.s3_bucket_name}.s3.${self:provider.region}.amazonaws.com
            # DomainName: lorrgs.s3.eu-west-1.amazonaws.com
            S3OriginConfig:
              OriginAccessIdentity:
                Fn::Join: ["",  [origin-access-identity/cloudfront/, Ref: cloudfrontoriginaccessidentity]]
          # 2) Lambda Origin
          - Id: lambda_origin
            DomainName:
              Fn::Join: ["", [Ref: ApiGatewayRestApi, ".execute-api.${self:provider.region}.amazonaws.com"]]
            OriginPath: /${self:provider.stage}
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
